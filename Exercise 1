#1. Implement a Deque class based on a cyclic array (fixed size list) which has addFirst(), addLast(),
#removeFirst(), removeLast(), first() returning the first element and last() returning the last element
#functions. Whenever the deque size is filled up, you should resize the underlying list via doubling
#its size. (20 points)

class Deque:

    def __init__(self):
        self.items = None
        self.size = 0

    def double_size(self):
        new_size = len(self.items) * 2
        new_items = []
        for i in range(new_size):
            new_items.append(None)
        for item in range(len(self.items)):
            new_items[item] = self.items[item]
        self.items = new_items

    def is_full(self):
        if self.size == len(self.items):
            return True
        return False

    def is_empty(self):
        return self.size == 0

    def insert_first(self, data):
        if self.is_full():
            self.double_size()
        if self.items[0] is None:
            self.items[0] = data
            self.size += 1
        else:
            if self.items[-1] is None:
                self.items.pop(-1)
                self.items.insert(0, data)
                self.size += 1

    def insert_last(self, data):
        if self.is_full():
            self.double_size()
        self.items[self.size] = data
        self.size += 1

    def deleteFirst(self):
        self.items.pop(0)
        self.items.append(None)
        self.size -= 1

    def deleteLast(self):
        self.items[self.size - 1] = None
        self.size -= 1

    def getFirst(self):
        return self.items[0]

    def getLast(self):
        return self.items[self.size - 1]

    def __repr__(self):
        print("Printing Deque: ", end="\t")
        print(self.items)
        return ""
